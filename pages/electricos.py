import streamlit as st
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import pandas as pd
import utilidades as util

# T√≠tulo e icono de la p√°gina
st.set_page_config(page_title="Veh√≠culos el√©ctricos", page_icon="üîã", layout="wide")
util.generarMenu()

autos_eh = pd.read_csv("autos_eh.csv")

    # Encabezado y descripci√≥n
st.header("An√°lisis de autos el√©ctricos e h√≠bridos")
st.write("Este an√°lisis eval√∫a los datos de autos el√©ctricos e h√≠bridos, analizando las motorizaciones, categor√≠as y consumo para identificar patrones relevantes y comparaciones clave entre los tipos de veh√≠culos.")
st.write("   ")

    # An√°lisis descriptivo
col1, col2 = st.columns([3, 1])

    
st.subheader("Vista general de los datos")
st.table(autos_eh.head())


st.subheader("Resumen estad√≠stico")
st.table(autos_eh.describe())

st.write("---")
st.write("   ")

# Distribuci√≥n por tipo de veh√≠culo
st.header("Distribuci√≥n por tipo de veh√≠culo")

col3, col4 = st.columns([3, 1])

with col3:
        motorizaciones = autos_eh["Motorizacion"].value_counts().index
        frecuencias = autos_eh["Motorizacion"].value_counts().values
        colores = ["gold"] * len(motorizaciones)

        fig, ax = plt.subplots(figsize=(8, 6))
        ax.bar(motorizaciones, frecuencias, color=colores)
        ax.set_title("Distribuci√≥n por tipo de veh√≠culo")
        ax.set_xlabel("Tipo")
        ax.set_ylabel("Frecuencia")
        ax.set_xticks(range(len(motorizaciones)))
        ax.set_xticklabels(motorizaciones, rotation=90)
        for i in range(len(motorizaciones)):
            ax.text(i, frecuencias[i] + 0.1, str(frecuencias[i]), ha='center', va='bottom', fontsize=8, rotation=90)

        st.pyplot(fig)

with col4:
        st.subheader("Tabla de Frecuencias")
        st.table(autos_eh["Motorizacion"].value_counts().rename_axis("Motorizaci√≥n").reset_index(name="Frecuencia"))

st.write("---")
st.write("   ")

# An√°lisis de veh√≠culos el√©ctricos
st.header("An√°lisis de veh√≠culos el√©ctricos")
Electricos = autos_eh[autos_eh["Motorizacion"] == "El√©ctricos puros"]

col5, col6 = st.columns([2, 1])

with col5:
        categorias = Electricos["Categoria"].value_counts().index
        frecuencias = Electricos["Categoria"].value_counts().values
        colores = ["yellowgreen"] * len(categorias)

        fig, ax = plt.subplots(figsize=(8, 6))
        ax.bar(categorias, frecuencias, color=colores)
        ax.set_title("Distribuci√≥n por categor√≠a de autos el√©ctricos")
        ax.set_xlabel("Categor√≠a")
        ax.set_ylabel("Frecuencia")
        ax.set_xticks(range(len(categorias)))
        ax.set_xticklabels(categorias, rotation=90)
        for i in range(len(categorias)):
            ax.text(i, frecuencias[i] + 1, str(frecuencias[i]), ha='center', va='bottom', fontsize=8, rotation=90)

        st.pyplot(fig)

with col6:
        st.subheader("Tabla de Categor√≠as")
        st.table(Electricos["Categoria"].value_counts().rename_axis("Categor√≠a").reset_index(name="Frecuencia"))

st.write("---")
st.write("   ")

# Consumo el√©ctrico por categor√≠a
st.subheader("Veh√≠culos el√©ctricos con mayor y menor consumo en kWh/km por categor√≠a")
Electricos.rename(columns={'Consumo_electrico_kWh/10km': 'Consumo_electrico_kWh/100km'}, inplace=True)
Electricos["Consumo_electrico_kWh/km"] = Electricos['Consumo_electrico_kWh/100km'] / 100

for i in Electricos["Categoria"].unique():
        E = Electricos[Electricos["Categoria"] == i]
        max_consumo = E["Consumo_electrico_kWh/km"].max()
        min_consumo = E["Consumo_electrico_kWh/km"].min()

        max_vehiculos = E[E["Consumo_electrico_kWh/km"] == max_consumo]["Modelo"].tolist()
        min_vehiculos = E[E["Consumo_electrico_kWh/km"] == min_consumo]["Modelo"].tolist()

        st.write(f"Categor√≠a: *{i}*")
        st.write(f"- Mayor consumo: {', '.join(max_vehiculos)} ({max_consumo:.2f} kWh/km)")
        st.write(f"- Menor consumo: {', '.join(min_vehiculos)} ({min_consumo:.2f} kWh/km)")

st.write("---")
st.write("   ")

# Distribuci√≥n del consumo el√©ctrico
st.header("Distribuci√≥n del Consumo El√©ctrico por Categor√≠a")

col7, col8 = st.columns([1, 1])
with col7:
        fig = plt.figure(figsize=(4.5, 4.5))
        sns.boxplot(x="Categoria", y="Consumo_electrico_kWh/km", data=Electricos)
        plt.title("Distribuci√≥n del Consumo El√©ctrico por Categor√≠a")
        plt.xlabel("Categor√≠a")
        plt.ylabel("Consumo El√©ctrico (kWh/km)")
        st.pyplot(fig)

with col8:
        fig = plt.figure(figsize=(6, 4))
        sns.violinplot(x="Categoria", y="Consumo_electrico_kWh/km", data=Electricos, inner="quartile", palette="muted")
        plt.title("Distribuci√≥n del Consumo El√©ctrico por Categor√≠a")
        plt.xlabel("Categor√≠a")
        plt.ylabel("Consumo El√©ctrico (kWh/km)")
        st.pyplot(fig)

st.write("---")
st.write("   ")
    
col115,col116=st.columns(2)
with col115:
        st.header("Analisis carga")
        # Gr√°fico 1: Dispersi√≥n MTMA_Kg vs Consumo El√©ctrico
        st.subheader("Relaci√≥n entre MTMA (Kg) y Consumo El√©ctrico (kWh/km)")
        fig, ax = plt.subplots(figsize=(8, 6))
        sns.scatterplot(data=Electricos, x="MTMA_Kg", y="Consumo_electrico_kWh/km", ax=ax)
        ax.set_title("MTMA vs Consumo El√©ctrico")
        ax.set_xlabel("MTMA (Kg)")
        ax.set_ylabel("Consumo El√©ctrico (kWh/km)")
        st.pyplot(fig)
        
        st.write("""
        ### Tendencia general:
        - Se observa que el consumo el√©ctrico (\(kWh/km\)) tiene una relaci√≥n no lineal con el peso total del veh√≠culo (\(MTMA\)).
        - Para veh√≠culos de menor peso (\(< 5,000 \, Kg\)), existe una mayor variabilidad en el consumo el√©ctrico, con valores que pueden superar los \(2.5 \, kWh/km\).
        - A medida que el \(MTMA\) aumenta (\(> 10,000 \, Kg\)), los valores de consumo el√©ctrico tienden a estabilizarse en un rango m√°s bajo (\(< 1.0 \, kWh/km\)).

        ### Interpretaci√≥n:
        - Los veh√≠culos ligeros suelen estar dise√±ados para aplicaciones urbanas o de corta distancia, lo que podr√≠a explicar su mayor consumo relativo debido a las constantes aceleraciones y frenados.
        - Los veh√≠culos m√°s pesados, aunque requieren m√°s energ√≠a en t√©rminos absolutos, tienden a ser m√°s eficientes por kil√≥metro recorrido en escenarios de larga distancia o velocidades constantes.
        """)

with col116:
        # Gr√°fico 2: Dispersi√≥n MTMA_Kg vs Autonom√≠a
        st.subheader("Relaci√≥n entre MTMA (Kg) y Autonom√≠a (Km)")
        fig, ax = plt.subplots(figsize=(8, 6))
        sns.scatterplot(data=Electricos, x="MTMA_Kg", y="Autonomia_electrica_km", ax=ax, color="orange")
        ax.set_title("MTMA vs Autonom√≠a")
        ax.set_xlabel("MTMA (Kg)")
        ax.set_ylabel("Autonom√≠a El√©ctrica (Km)")
        st.pyplot(fig)

    # Agregar texto explicativo
        st.write("""
            ### Tendencia general:
            - Para pesos m√°s bajos (\(< 5,000 \, Kg\)), la autonom√≠a var√≠a significativamente, desde menos de \(100 \, Km\) hasta m√°s de \(700 \, Km\).
            - A medida que el \(MTMA\) aumenta, la autonom√≠a se concentra en un rango m√°s estrecho (\(200 \, Km\) a \(400 \, Km\)).

            ### Interpretaci√≥n:
            - Los veh√≠culos ligeros probablemente est√°n dise√±ados para tener mayor flexibilidad en autonom√≠a, dependiendo de su tama√±o de bater√≠a y su eficiencia.
            - Los veh√≠culos m√°s pesados parecen optimizados para aplicaciones espec√≠ficas, donde la autonom√≠a se ajusta a sus prop√≥sitos, como transporte de mercanc√≠as o pasajeros en rutas predefinidas.
            """)

col117,col118=st.columns(2)
with col117:
        # Gr√°fico 3: Comparaci√≥n entre Autonom√≠a y Consumo por MTMA
        st.subheader("Comparaci√≥n de Autonom√≠a y Consumo por MTMA")
        fig, ax1 = plt.subplots(figsize=(8, 6))
        sns.lineplot(data=Electricos, x="MTMA_Kg", y="Consumo_electrico_kWh/km", label="Consumo El√©ctrico", ax=ax1)
        sns.lineplot(data=Electricos, x="MTMA_Kg", y="Autonomia_electrica_km", label="Autonom√≠a El√©ctrica", ax=ax1)
        ax1.set_title("MTMA vs Autonom√≠a y Consumo")
        ax1.set_xlabel("MTMA (Kg)")
        ax1.set_ylabel("Valores")
        ax1.legend()
        st.pyplot(fig)

with col118:

        # Gr√°fico 4: Matriz de correlaci√≥n
        st.subheader("Matriz de correlaci√≥n entre variables num√©ricas")
        fig, ax = plt.subplots(figsize=(8, 6))
        correlation_matrix = Electricos[["MTMA_Kg", "Consumo_electrico_kWh/km", "Autonomia_electrica_km"]].corr()
        sns.heatmap(correlation_matrix, annot=True, cmap="coolwarm", ax=ax)
        ax.set_title("Matriz de Correlaci√≥n")
        st.pyplot(fig)

    
from scipy.stats import zscore

  
Electricos['z_score'] = zscore(Electricos['Consumo_electrico_kWh/km'])

# Filtrar datos sin valores at√≠picos (por ejemplo, z-score entre -3 y 3)
Electricos = Electricos[(Electricos['z_score'] >= -3) & (Electricos['z_score'] <= 3)]
    
st.header("Precio de KWh en algunos vehiculos electricos")
    
# Datos de los camiones
camiones = [
        {
            "nombre": "Mercedes Benz eActross",
            "capacidad_carga_kg": 40000,
            "capacidad_bateria_kWh": 600,
            "autonomia_km": 500,
            "consumo_kWh_por_km": 1.19,
            "tiempo_carga_horas": 0.833333333,
            "costo_por_kWh_COP": 1051,
        },
        {
            "nombre": "Tesla Semi",
            "capacidad_carga_kg": 22000,
            "capacidad_bateria_kWh": 900,
            "autonomia_km": 800,
            "consumo_kWh_por_km": 1.1,
            "tiempo_carga_horas": 0.714285714,
            "costo_por_kWh_COP": 1051,
        },
    ]

    # C√°lculo del costo por kil√≥metro
def calcular_costo_por_km(camion):
        consumo_por_km = camion["consumo_kWh_por_km"]
        costo_por_kWh = camion["costo_por_kWh_COP"]
        return consumo_por_km * costo_por_kWh

# Crear un DataFrame con los datos y resultados
data = []
for camion in camiones:
        costo_por_km = calcular_costo_por_km(camion)
        data.append({
            "Cami√≥n": camion["nombre"],
            "Capacidad de carga (kg)": camion["capacidad_carga_kg"],
            "Capacidad de bater√≠a (kWh)": camion["capacidad_bateria_kWh"],
            "Autonom√≠a (km)": camion["autonomia_km"],
            "Consumo (kWh/km)": camion["consumo_kWh_por_km"],
            "Tiempo de carga (hrs)": camion["tiempo_carga_horas"],
            "Costo por kWh (COP)": camion["costo_por_kWh_COP"],
            "Costo por km (COP)": round(costo_por_km, 2),
        })

df = pd.DataFrame(data)

st.subheader("Tabla de datos y resultados")
st.table(df)

# An√°lisis de veh√≠culos h√≠bridos
st.header("An√°lisis de veh√≠culos h√≠bridos")
    
Hibridos = autos_eh[autos_eh['Motorizacion'].str.contains('h√≠bridos', case=False, na=False)]
Hibridos.rename(columns={'Consumo_electrico_kWh/10km': 'Consumo_combustible_l/100km'}, inplace=True)

col9, col10 = st.columns([2, 1])

with col9:
        categorias = Hibridos["Categoria"].value_counts().index
        frecuencias = Hibridos["Categoria"].value_counts().values
        colores = ["skyblue"] * len(categorias)

        fig, ax = plt.subplots(figsize=(8, 6))
        ax.bar(categorias, frecuencias, color=colores)
        ax.set_title("Distribuci√≥n por categor√≠a de autos h√≠bridos")
        ax.set_xlabel("Categor√≠a")
        ax.set_ylabel("Frecuencia")
        ax.set_xticks(range(len(categorias)))
        ax.set_xticklabels(categorias, rotation=90)
        for i in range(len(categorias)):
            ax.text(i, frecuencias[i] + 1, str(frecuencias[i]), ha='center', va='bottom', fontsize=8, rotation=90)

        st.pyplot(fig)

with col10:
        st.subheader("Tabla de Categor√≠as")
        st.table(Hibridos["Categoria"].value_counts().rename_axis("Categor√≠a").reset_index(name="Frecuencia"))

st.write("---")

# Veh√≠culos h√≠bridos: Consumo
st.subheader("Veh√≠culos h√≠bridos con mayor y menor consumo en L/100km por categor√≠a")

for i in Hibridos["Categoria"].unique():
        E = Hibridos[Hibridos["Categoria"] == i]
        max_consumo = E["Consumo_combustible_l/100km"].max()
        min_consumo = E["Consumo_combustible_l/100km"].min()

        max_vehiculos = E[E["Consumo_combustible_l/100km"] == max_consumo]["Modelo"].tolist()
        min_vehiculos = E[E["Consumo_combustible_l/100km"] == min_consumo]["Modelo"].tolist()

        st.write(f"Categor√≠a: *{i}*")
        st.write(f"- Mayor consumo: {', '.join(max_vehiculos)} ({max_consumo:.2f} L/100km)")
        st.write(f"- Menor consumo: {', '.join(min_vehiculos)} ({min_consumo:.2f} L/100km)")

st.write("---")
st.write("   ")

# Distribuci√≥n del consumo h√≠brido
st.header("Distribuci√≥n del Consumo de Combustible por Categor√≠a")

col11, col12 = st.columns([1, 1])

with col11:
        fig = plt.figure(figsize=(4.5, 4.5))
        sns.boxplot(x="Categoria", y="Consumo_combustible_l/100km", data=Hibridos)
        plt.title("Distribuci√≥n del Consumo de Combustible por Categor√≠a")
        plt.xlabel("Categor√≠a")
        plt.ylabel("Consumo (L/100km)")
        st.pyplot(fig)

with col12:
        fig = plt.figure(figsize=(6, 4))
        sns.violinplot(x="Categoria", y="Consumo_combustible_l/100km", data=Hibridos, inner="quartile", palette="muted")
        plt.title("Distribuci√≥n del Consumo de Combustible por Categor√≠a")
        plt.xlabel("Categor√≠a")
        plt.ylabel("Consumo (L/100km)")
        st.pyplot(fig)

st.write("---")

# Mostrar tabla
st.table(df)
Hibridos['z_score'] = zscore(Hibridos['Consumo_combustible_l/100km'])

# Filtrar datos sin valores at√≠picos (por ejemplo, z-score entre -3 y 3)
Hibridos = Hibridos[(Hibridos['z_score'] >= -3) & (Hibridos['z_score'] <= 3)]

# An√°lisis adicional: autonom√≠a
st.subheader("An√°lisis de autonom√≠a por categor√≠a")

for i in Hibridos["Categoria"].unique():
        E = Hibridos[Hibridos["Categoria"] == i]
        max_autonomia = E["Autonomia_electrica_km"].max()
        min_autonomia = E["Autonomia_electrica_km"].min()

        max_vehiculos = E[E["Autonomia_electrica_km"] == max_autonomia]["Modelo"].tolist()
        min_vehiculos = E[E["Autonomia_electrica_km"] == min_autonomia]["Modelo"].tolist()

        st.write(f"Categor√≠a: *{i}*")
        st.write(f"- Mayor autonom√≠a: {', '.join(max_vehiculos)} ({max_autonomia:.2f} km)")
        st.write(f"- Menor autonom√≠a: {', '.join(min_vehiculos)} ({min_autonomia:.2f} km)")

st.write("---")
    
st.header("Analisis consumo combustible, emisiones")
Hibridos["Consumo promedio"]=(Hibridos['Consumo M√°ximo']+Hibridos['Consumo M√≠nimo'])/2
Hibridos["Emisiones promedio"]=(Hibridos['Emisiones M√≠nimo']+Hibridos['Emisiones M√°ximo'])/2

col111, col112 = st.columns([1, 1])
    
with col111:
        # Gr√°fico de dispersi√≥n entre Emisiones y Consumo
        fig,ax=plt.subplots()
        plt.scatter(Hibridos['Consumo promedio'], Hibridos['Emisiones promedio'], alpha=0.6)
        plt.title('Relaci√≥n entre Emisiones y Consumo en Veh√≠culos H√≠bridos')
        plt.xlabel('Consumo Promedio (L/100 km )')
        plt.ylabel('Emisiones Promedio (g CO2/km)')
        plt.grid(True)
        st.pyplot(fig)
with col112:
        st.header("An√°lisis")
        st.text("Hay una correlaci√≥n positiva entre el consumo promedio de combustible (L/100 km) y las emisiones promedio (g CO‚ÇÇ/km). Esto significa que a medida que aumenta el consumo promedio de combustible, las emisiones de CO‚ÇÇ tambi√©n aumentan.")
    
key_variables = ['Consumo promedio', 'Autonomia_electrica_km', 'Emisiones promedio']

col113, col114 = st.columns(2)

# Definir las variables clave para el an√°lisis
key_variables = ['Consumo promedio', 'Autonomia_electrica_km', 'Emisiones promedio']

# Verificar que las variables clave est√©n presentes en el DataFrame
missing_vars = [var for var in key_variables if var not in Hibridos.columns]
if missing_vars:
        st.write(f"Las siguientes variables clave faltan en el DataFrame: {', '.join(missing_vars)}")
else:
        
# Pairplot en la primera columna
        with col113:
            st.subheader("Pairplot de Variables Clave")
            pairplot_fig = sns.pairplot(
                Hibridos[key_variables].dropna(),
                diag_kind='kde',
                plot_kws={'alpha': 0.7}
            )
            pairplot_fig.fig.suptitle('Pairplot de Variables Clave', y=1.02)  # Ajustar el t√≠tulo
            st.pyplot(pairplot_fig)

        # Matriz de correlaci√≥n en la segunda columna
        with col114:
            st.subheader("Matriz de Correlaci√≥n")
            correlation_matrix = Hibridos[key_variables].corr()

            fig, ax = plt.subplots(figsize=(8, 6))  # Tama√±o ajustado para mejor visibilidad
            sns.heatmap(
                correlation_matrix,
                annot=True,
                cmap='coolwarm',
                fmt='.2f',
                linewidths=0.5,
                cbar_kws={'label': 'Correlaci√≥n'}
            )
            ax.set_title('Matriz de Correlaci√≥n (Consumo, Emisiones, Autonom√≠a)', fontsize=14)
            st.pyplot(fig)
        
        st.text("""Consumo promedio: Su distribuci√≥n est√° concentrada cerca de valores bajos (cercanos a 0), indicando que la mayor√≠a de los veh√≠culos tienen un consumo promedio eficiente.
                Autonom√≠a el√©ctrica (km): La distribuci√≥n est√° altamente concentrada en un rango bajo, con unos pocos valores que alcanzan los 400 km, sugiriendo que la mayor√≠a de los veh√≠culos tienen una autonom√≠a limitada.
                Emisiones promedio: Similar al Consumo promedio, la mayor√≠a de los veh√≠culos tienen bajas emisiones, aunque hay valores at√≠picos en el rango de 100-200¬†g¬†CO‚ÇÇ/km""")

st.write("---")
st.write("   ")

col115, col116 = st.columns([1,5])

with col115:
    btnInicio = st.button('Inicio')

if btnInicio:
    st.switch_page('main.py')