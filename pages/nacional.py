import streamlit as st
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import pandas as pd
import utilidades as util

# T√≠tulo e icono de la p√°gina
st.set_page_config(page_title="Trayecto nacional", page_icon="üó∫Ô∏è", layout="wide")
util.generarMenu()

df = pd.read_csv("BDVehiculosLHOK.csv")

st.title('An√°lisis de Datos de Veh√≠culos con recorridos de Larga Distancia')
st.header("Recorridos de larga distancia")

st.write("El transporte de larga distancia (Long Haul) se refiere a operaciones log√≠sticas donde los veh√≠culos recorren trayectos extensos, generalmente superiores a 150 kil√≥metros, transportando grandes vol√∫menes de carga entre ciudades, regiones o incluso pa√≠ses. Este tipo de transporte es fundamental en cadenas de suministro globales, conectando centros de producci√≥n, distribuci√≥n y consumo.")
st.image("https://www.scania.com/content/www/uk/en/home/products/attributes/fuel-efficiency/_jcr_content/image.img.90.360.jpeg", caption="Imagen desde URL:https://www.scania.com/content/www/uk/en/home/products/attributes/fuel-efficiency/_jcr_content/image.img.90.360.jpeg")

st.markdown("**A continuaci√≥n, se presenta un an√°lisis detallado de los datos relacionados con escenarios de transporte de larga distancia. Este an√°lisis se centra en caracter√≠sticas clave como el consumo de combustible, las emisiones de CO‚ÇÇ, el rendimiento operacional y las condiciones de carga de los veh√≠culos, proporcionando una visi√≥n integral del desempe√±o en diversas misiones y configuraciones.**")

# Definici√≥n de las columnas

st.header("Descripci√≥n de los campos")

columnas = {
    'OEM_Make': 'Marca del fabricante del veh√≠culo.',
    'OEM_Model': 'Modelo del veh√≠culo fabricado por el OEM (Original Equipment Manufacturer).',
    'MS_VehicleCategoryCode': 'C√≥digo de la categor√≠a del veh√≠culo seg√∫n el fabricante.',
    'MS_FuelType': 'Tipo de combustible utilizado por el veh√≠culo (por ejemplo, di√©sel, gasolina, gas, biodi√©sel).',
    'LHL_Mission': 'Tipo de misi√≥n de transporte en el escenario de larga distancia ligero (LHL).',
    'LHL_TotalVehicleMass_kg': 'Masa total del veh√≠culo en kilogramos con carga incluido',
    'LHL_Payload_kg': 'Peso de la carga transportada en el veh√≠culo en kilogramos.',
    'LHL_AverageSpeed_kmh': 'Velocidad promedio del veh√≠culo en kil√≥metros por hora (km/h).',
    'LHL_MaxSpeed_kmh': 'Velocidad m√°xima alcanzada por el veh√≠culo en kil√≥metros por hora (km/h).',
    'LHL_CO2_gkm': 'Emisiones de CO‚ÇÇ por kil√≥metro recorrido en gramos (g/km).',
    'LHL_FuelConsumption_l100km': 'Consumo de combustible en litros por cada 100 kil√≥metros (L/100km).',
    'LHR_Mission': 'Tipo de misi√≥n de transporte en el escenario de larga distancia regular (LHR).',
    'LHR_TotalVehicleMass_kg': 'Masa total del veh√≠culo en kilogramos en el escenario LHR con carga incluida.',
    'LHR_Payload_kg': 'Peso de la carga transportada en el veh√≠culo en kilogramos en el escenario LHR.',
    'LHR_AverageSpeed_kmh': 'Velocidad promedio del veh√≠culo en kil√≥metros por hora (km/h) en el escenario LHR.',
    'LHR_MaxSpeed_kmh': 'Velocidad m√°xima alcanzada por el veh√≠culo en kil√≥metros por hora (km/h) en el escenario LHR.',
    'LHR_CO2_gkm': 'Emisiones de CO‚ÇÇ por kil√≥metro recorrido en gramos (g/km) en el escenario LHR.',
    'LHR_FuelConsumption_l100km': 'Consumo de combustible en litros por cada 100 kil√≥metros (L/100km) en el escenario LHR.'
}

# Mostrar las columnas y sus definiciones
for col, defn in columnas.items():st.markdown(f"**{col}:** {defn}")

# Mostrar las estad√≠sticas descriptivas del dataframe

st.write("A continuaci√≥n se muestran los datos estad√≠sticos del dataframe:")
estadisticas = df.describe().T
st.dataframe(estadisticas)  # Muestra el dataframe en Streamlit

# T√≠tulo en Streamlit
st.header("An√°lisis gr√°fico veh√≠culos con recorridos de larga distancia")
st.write("**Gr√°fico que muestra las emisiones de CO2 por tipo de veh√≠culo y por marca**")

# Agrupar por tipo de veh√≠culo y marca y calcular las emisiones promedio de CO2 LHL y LHR
Emisiones_marca_tVeh = df.groupby(['MS_VehicleCategoryCode', 'OEM_Make'])[['LHL_CO2_gkm', 'LHR_CO2_gkm']].mean().reset_index()
# Ordenar el DataFrame por tipo de veh√≠culo y por las menores emisiones LHL y LHR
Emisiones_marca_tVeh = Emisiones_marca_tVeh.sort_values(by=['MS_VehicleCategoryCode', 'LHL_CO2_gkm', 'LHR_CO2_gkm'])

# Crear una fila con dos columnas para mostrar los gr√°ficos y las conclusiones
col1, col2, col3 = st.columns(3)

# Primer gr√°fico: Emisiones de CO2 LHL
with col1:
    # Crear el gr√°fico de barras para LHL
    fig, ax = plt.subplots(figsize=(12, 8))
    sns.barplot(x='MS_VehicleCategoryCode', y='LHL_CO2_gkm', hue='OEM_Make', data=Emisiones_marca_tVeh, ax=ax)
    ax.set_xlabel('Tipo de Veh√≠culo')
    ax.set_ylabel('Emisiones de CO2 (g/km)')
    ax.set_title('Ranking de Emisiones de CO2 LHL por Marca para cada Tipo de Veh√≠culo')
    ax.legend(title='Marca')

    #Ajustar Labels
    plt.tight_layout()

    st.pyplot(fig)
    
    # Texto debajo del gr√°fico LHL
    st.markdown("**Gr√°fico LHL (Long Haul)**: Emisiones de CO2 por tipo de veh√≠culo y marca para LHL.")

# Segundo gr√°fico: Emisiones de CO2 LHR
with col2:
    # Crear el gr√°fico de barras para LHR
    fig, ax = plt.subplots(figsize=(12, 8))
    sns.barplot(x='MS_VehicleCategoryCode', y='LHR_CO2_gkm', hue='OEM_Make', data=Emisiones_marca_tVeh, ax=ax)
    ax.set_xlabel('Tipo de Veh√≠culo')
    ax.set_ylabel('Emisiones de CO2 (g/km)')
    ax.set_title('Ranking de Emisiones de CO2 LHR por Marca para cada Tipo de Veh√≠culo')
    ax.legend(title='Marca')

    #Ajustar Labels
    plt.tight_layout()

    st.pyplot(fig)
    
    # Texto debajo del gr√°fico LHR
    st.markdown("**Gr√°fico LHR (Long Haul Return)**: Emisiones de CO2 por tipo de veh√≠culo y marca para LHR.")

# Conclusi√≥n
with col3:
    st.write("""
        "Inicialmente, se observa que no existe una variaci√≥n pronunciada en las emisiones de CO2 entre los distintos escenarios,
        tanto para LHL como para LHR. Sin embargo, se puede apreciar que los camiones Scania presentan las menores emisiones de 
        CO2 en ambos escenarios (LHL y LHR) para los veh√≠culos de tipo N3 (veh√≠culos con un peso bruto superior a 12 toneladas). 
        Por otro lado, Renault destaca por sus bajas emisiones en las categor√≠as M1 y M3, que corresponden al transporte de pasajeros."

    """)

# T√≠tulo en Streamlit
st.write("**Gr√°fico que muestra el consumo de combustible (lts/100km) por tipo de veh√≠culo y por marca**")

# Agrupar por tipo de veh√≠culo y marca y calcular el consumo promedio de combustible LHL y LHR
Consumo_marca_tVeh = df.groupby(['MS_VehicleCategoryCode', 'OEM_Make'])[['LHL_FuelConsumption_l100km', 'LHR_FuelConsumption_l100km']].mean().reset_index()

# Ordenar el DataFrame por tipo de veh√≠culo y por el menor consumo LHL y LHR
Consumo_marca_tVeh = Consumo_marca_tVeh.sort_values(by=['MS_VehicleCategoryCode', 'LHL_FuelConsumption_l100km', 'LHR_FuelConsumption_l100km'])

# Crear una fila con tres columnas para mostrar los gr√°ficos y las conclusiones
col1, col2, col3 = st.columns(3)

# Primer gr√°fico: Consumo de combustible LHL
with col1:
    # Crear el gr√°fico de barras para LHL
    fig, ax = plt.subplots(figsize=(12, 8))
    sns.barplot(x='MS_VehicleCategoryCode', y='LHL_FuelConsumption_l100km', hue='OEM_Make', data=Consumo_marca_tVeh, ax=ax)
    ax.set_xlabel('Tipo de Veh√≠culo')
    ax.set_ylabel('Consumo de Combustible (L/100 km)')
    ax.set_title('Ranking de Consumo de Combustible LHL por Marca para cada Tipo de Veh√≠culo')
    ax.legend(title='Marca')

    #Ajustar Labels
    plt.tight_layout()

    st.pyplot(fig)
    
    # Texto debajo del gr√°fico LHL
    st.markdown("**Gr√°fico LHL (Long Haul)**: Consumo de combustible por tipo de veh√≠culo y marca para LHL.")

# Segundo gr√°fico: Consumo de combustible LHR
with col2:
    # Crear el gr√°fico de barras para LHR
    fig, ax = plt.subplots(figsize=(12, 8))
    sns.barplot(x='MS_VehicleCategoryCode', y='LHR_FuelConsumption_l100km', hue='OEM_Make', data=Consumo_marca_tVeh, ax=ax)
    ax.set_xlabel('Tipo de Veh√≠culo')
    ax.set_ylabel('Consumo de Combustible (L/100 km)')
    ax.set_title('Ranking de Consumo de Combustible LHR por Marca para cada Tipo de Veh√≠culo')
    ax.legend(title='Marca')

    #Ajustar Labels
    plt.tight_layout()

    
    st.pyplot(fig)
    
    # Texto debajo del gr√°fico LHR
    st.markdown("**Gr√°fico LHR (Long Haul Return)**: Consumo de combustible por tipo de veh√≠culo y marca para LHR.")

# Conclusi√≥n
with col3:
    st.write("""
        "Este an√°lisis presenta el consumo de combustible de los veh√≠culos en dos escenarios. Las gr√°ficas muestran un patr√≥n similar
         al de las emisiones de CO2, evidenciando que los veh√≠culos con menor consumo de combustible tambi√©n registran las menores 
         emisiones de CO2. Esto sugiere una relaci√≥n directa entre la eficiencia en el consumo de combustible y las emisiones
    """)

# Calcular el coeficiente de correlaci√≥n de Pearson para LHL
correlation_lhl = df['LHL_FuelConsumption_l100km'].corr(df['LHL_CO2_gkm'])

# Calcular el coeficiente de correlaci√≥n de Pearson para LHR
correlation_lhr = df['LHR_FuelConsumption_l100km'].corr(df['LHR_CO2_gkm'])

# T√≠tulo del an√°lisis en Streamlit
st.header("An√°lisis de Correlaci√≥n entre Consumo de Combustible y Emisiones de CO2")

# Mostrar los resultados en Streamlit
st.write(f"**Correlaci√≥n entre Consumo de Combustible y Emisiones de CO2 (LHL):** {correlation_lhl:.2f}")
st.write(f"**Correlaci√≥n entre Consumo de Combustible y Emisiones de CO2 (LHR):** {correlation_lhr:.2f}")

# Interpretaci√≥n de los resultados
st.write("""
    Se ha identificado una correlaci√≥n directa entre el consumo de combustible y las emisiones de CO2,
    lo que sugiere que a mayor consumo de combustible, mayores son las emisiones de CO2. Este patr√≥n resalta
    la importancia de optimizar el consumo de combustible como una estrategia para reducir las emisiones contaminantes.
""")

# Calcular m√©tricas promedio por marca para LHL
eficiencia_marcas_lhl = df.groupby('OEM_Make').agg(
    Consumo_FuelPromedio_LHL=('LHL_FuelConsumption_l100km', 'mean'),
    Emisiones_Promedio_LHL=('LHL_CO2_gkm', 'mean')
).reset_index()

# Calcular m√©tricas promedio por marca para LHR
eficiencia_marcas_lhr = df.groupby('OEM_Make').agg(
    Consumo_FuelPromedio_LHR=('LHR_FuelConsumption_l100km', 'mean'),
    Emisiones_Promedio_LHR=('LHR_CO2_gkm', 'mean')
).reset_index()

# Ordenar las marcas por menor consumo de combustible para LHL
eficiencia_marcas_lhl = eficiencia_marcas_lhl.sort_values('Consumo_FuelPromedio_LHL')

# Ordenar las marcas por menor consumo de combustible para LHR
eficiencia_marcas_lhr = eficiencia_marcas_lhr.sort_values('Consumo_FuelPromedio_LHR')

# Crear una fila con tres columnas para los gr√°ficos y las conclusiones
col1, col2 = st.columns(2)

# Primer gr√°fico: Consumo y emisiones para LHL
with col1:
    fig, ax1 = plt.subplots(figsize=(14, 8))

    # Barras para consumo promedio de combustible LHL
    sns.barplot(data=eficiencia_marcas_lhl, x='OEM_Make', y='Consumo_FuelPromedio_LHL', color='blue', alpha=0.7, label='Consumo Promedio LHL (l/100km)', ax=ax1)
    ax1.set_ylabel('Consumo Promedio LHL (l/100km)', color='blue')
    ax1.set_xlabel('Marca')
    ax1.tick_params(axis='y', labelcolor='blue')
    ax1.set_xticklabels(eficiencia_marcas_lhl['OEM_Make'], rotation=45, ha='right')

    # Eje secundario para emisiones promedio LHL
    ax2 = ax1.twinx()
    sns.lineplot(data=eficiencia_marcas_lhl, x='OEM_Make', y='Emisiones_Promedio_LHL', color='red', label='Emisiones Promedio LHL (CO‚ÇÇ g/km)', marker='o', ax=ax2)
    ax2.set_ylabel('Emisiones Promedio LHL (CO‚ÇÇ g/km)', color='red')
    ax2.tick_params(axis='y', labelcolor='red')

    # A√±adir leyendas y t√≠tulo
    fig.suptitle('Marcas M√°s Eficientes en Consumo de Combustible LHL vs. Emisiones de CO‚ÇÇ LHL', fontsize=16)
    ax1.legend(loc='upper left', bbox_to_anchor=(0, 1))
    ax2.legend(loc='upper right', bbox_to_anchor=(1, 1))

    #Ajustar Labels
    plt.tight_layout()

    st.pyplot(fig)

# Segundo gr√°fico: Consumo y emisiones para LHR
with col2:
    fig, ax1 = plt.subplots(figsize=(14, 8))

    # Barras para consumo promedio de combustible LHR
    sns.barplot(data=eficiencia_marcas_lhr, x='OEM_Make', y='Consumo_FuelPromedio_LHR', color='green', alpha=0.7, label='Consumo Promedio LHR (l/100km)', ax=ax1)
    ax1.set_ylabel('Consumo Promedio LHR (l/100km)', color='green')
    ax1.set_xlabel('Marca')
    ax1.tick_params(axis='y', labelcolor='green')
    ax1.set_xticklabels(eficiencia_marcas_lhr['OEM_Make'], rotation=45, ha='right')

    # Eje secundario para emisiones promedio LHR
    ax2 = ax1.twinx()
    sns.lineplot(data=eficiencia_marcas_lhr, x='OEM_Make', y='Emisiones_Promedio_LHR', color='orange', label='Emisiones Promedio LHR (CO‚ÇÇ g/km)', marker='o', ax=ax2)
    ax2.set_ylabel('Emisiones Promedio LHR (CO‚ÇÇ g/km)', color='orange')
    ax2.tick_params(axis='y', labelcolor='orange')

    # A√±adir leyendas y t√≠tulo
    fig.suptitle('Marcas M√°s Eficientes en Consumo de Combustible LHR vs. Emisiones de CO‚ÇÇ LHR', fontsize=16)
    ax1.legend(loc='upper left', bbox_to_anchor=(0, 1))
    ax2.legend(loc='upper right', bbox_to_anchor=(1, 1))

    #Ajustar Labels
    plt.tight_layout()

    st.pyplot(fig)

# Tercera columna: Conclusi√≥n
st.write("""
    **Conclusi√≥n:**
    Las gr√°ficas revelan la relaci√≥n entre las marcas y su rendimiento en t√©rminos de consumo de combustible
    y emisiones de CO‚ÇÇ. Se observa que Scania lidera en eficiencia, destac√°ndose por su excelente autonom√≠a y
    bajas emisiones de CO‚ÇÇ. Le siguen DAF, Volvo y MAN en cuanto a rendimiento, mientras que IVECO ocupa el √∫ltimo 
    lugar, con la menor autonom√≠a y las mayores emisiones de CO‚ÇÇ.
    """)

# T√≠tulo del an√°lisis en Streamlit
st.header("An√°lisis de costo por kilometro recorrido para cada tipo de vehiculo y marca")

# Definir el costo del di√©sel por gal√≥n en COP
costo_diesel_por_galon = 10561  # COP

# Filtrar los veh√≠culos di√©sel
df_diesel = df[df['MS_FuelType'] == 'Diesel'].copy()

# Convertir el consumo de l/100 km a galones/100 km para LHL
df_diesel['Consumo_por_galon_LHL'] = df_diesel['LHL_FuelConsumption_l100km'] / 3.78541
df_diesel['Costo_por_km_LHL'] = (df_diesel['Consumo_por_galon_LHL'] / 100) * costo_diesel_por_galon

# Convertir el consumo de l/100 km a galones/100 km para LHR
df_diesel['Consumo_por_galon_LHR'] = df_diesel['LHR_FuelConsumption_l100km'] / 3.78541
df_diesel['Costo_por_km_LHR'] = (df_diesel['Consumo_por_galon_LHR'] / 100) * costo_diesel_por_galon

# Agrupar por marca y tipo de veh√≠culo y calcular el costo promedio por kil√≥metro para LHL y LHR
costo_por_km_por_marca_y_tipo = df_diesel.groupby(['OEM_Make', 'MS_VehicleCategoryCode'])[['Costo_por_km_LHL', 'Costo_por_km_LHR']].mean().reset_index()

# Renombrar columnas en espa√±ol
costo_por_km_por_marca_y_tipo.columns = ['Marca', 'Tipo_de_Veh√≠culo', 'Costo_promedio_por_km_LHL (COP)', 'Costo_promedio_por_km_LHR (COP)']

# Graficar los resultados usando Streamlit y seaborn

# Crear dos columnas en Streamlit
col1, col2 = st.columns(2)

# Gr√°fico para LHL
with col1:
    fig, ax1 = plt.subplots(figsize=(8, 6))
    
    # Graficar LHL por tipo de veh√≠culo y marca
    sns.barplot(data=costo_por_km_por_marca_y_tipo, x='Tipo_de_Veh√≠culo', y='Costo_promedio_por_km_LHL (COP)', hue='Marca', ax=ax1)
    
    # T√≠tulos y etiquetas
    ax1.set_title('Costo Promedio por Kil√≥metro LHL (COP) por Tipo de Veh√≠culo')
    ax1.set_xlabel('Tipo de Veh√≠culo')
    ax1.set_ylabel('Costo Promedio por Km (COP)')
    ax1.set_xticklabels(costo_por_km_por_marca_y_tipo['Tipo_de_Veh√≠culo'].unique(), rotation=45, ha='right')

    #Ajustar Labels
    plt.tight_layout()

    # Mostrar el gr√°fico en Streamlit
    st.pyplot(fig)

# Gr√°fico para LHR
with col2:
    fig, ax2 = plt.subplots(figsize=(8, 6))
    
    # Graficar LHR por tipo de veh√≠culo y marca
    sns.barplot(data=costo_por_km_por_marca_y_tipo, x='Tipo_de_Veh√≠culo', y='Costo_promedio_por_km_LHR (COP)', hue='Marca', ax=ax2)
    
    # T√≠tulos y etiquetas
    ax2.set_title('Costo Promedio por Kil√≥metro LHR (COP) por Tipo de Veh√≠culo')
    ax2.set_xlabel('Tipo de Veh√≠culo')
    ax2.set_ylabel('Costo Promedio por Km (COP)')
    ax2.set_xticklabels(costo_por_km_por_marca_y_tipo['Tipo_de_Veh√≠culo'].unique(), rotation=45, ha='right')
    
    #Ajustar Labels
    plt.tight_layout()

    # Mostrar el gr√°fico en Streamlit
    st.pyplot(fig)

    # Definir el costo del di√©sel por gal√≥n en COP 
costo_diesel_por_galon = 10561  # COP

# Filtrar los veh√≠culos di√©sel
df_diesel = df[df['MS_FuelType'] == 'Diesel'].copy()

# Convertir el consumo de l/100 km a galones/100 km para LHL
df_diesel['Consumo_por_galon_LHL'] = df_diesel['LHL_FuelConsumption_l100km'] / 3.78541
df_diesel['Costo_por_km_LHL'] = (df_diesel['Consumo_por_galon_LHL'] / 100) * costo_diesel_por_galon

# Convertir el consumo de l/100 km a galones/100 km para LHR
df_diesel['Consumo_por_galon_LHR'] = df_diesel['LHR_FuelConsumption_l100km'] / 3.78541
df_diesel['Costo_por_km_LHR'] = (df_diesel['Consumo_por_galon_LHR'] / 100) * costo_diesel_por_galon

# Agrupar por marca y tipo de veh√≠culo y calcular el costo promedio por kil√≥metro
costo_por_km_por_marca_y_tipo = df_diesel.groupby(['OEM_Make', 'MS_VehicleCategoryCode'])[['Costo_por_km_LHL', 'Costo_por_km_LHR']].mean().reset_index()

# Ordenar de menor a mayor por costo por kil√≥metro para LHL y LHR
costo_por_km_por_marca_y_tipo_sorted_LHL = costo_por_km_por_marca_y_tipo.sort_values(by=['MS_VehicleCategoryCode', 'Costo_por_km_LHL'])
costo_por_km_por_marca_y_tipo_sorted_LHR = costo_por_km_por_marca_y_tipo.sort_values(by=['MS_VehicleCategoryCode', 'Costo_por_km_LHR'])

# Seleccionar la mejor marca (menor costo por km) por tipo de veh√≠culo
mejores_marcas_LHL = costo_por_km_por_marca_y_tipo_sorted_LHL.groupby('MS_VehicleCategoryCode').first().reset_index()
mejores_marcas_LHR = costo_por_km_por_marca_y_tipo_sorted_LHR.groupby('MS_VehicleCategoryCode').first().reset_index()

# Unir los resultados de LHL y LHR
mejores_marcas = pd.merge(mejores_marcas_LHL[['MS_VehicleCategoryCode', 'OEM_Make', 'Costo_por_km_LHL']], 
                          mejores_marcas_LHR[['MS_VehicleCategoryCode', 'OEM_Make', 'Costo_por_km_LHR']], 
                          on='MS_VehicleCategoryCode')

# Renombrar columnas para mayor claridad
mejores_marcas.columns = ['Tipo_de_Veh√≠culo', 'Marca_LHL', 'Costo_por_km_LHL (COP)', 'Marca_LHR', 'Costo_por_km_LHR (COP)']

# Mostrar la tabla de las mejores marcas por categor√≠a y costo por km
st.write("### Mejores Marcas por Categor√≠a (Menor Costo por Kil√≥metro)")
st.dataframe(mejores_marcas)

st.write("---")
st.write("   ")

col1, col2, col3 = st.columns([2,1,5])

with col1:
    btnElectricos = st.button('Veh√≠culos el√©ctricos')
with col2:
    btnInicio = st.button('Inicio')

if btnElectricos:
    st.switch_page('pages/electricos.py')

if btnInicio:
    st.switch_page('main.py')