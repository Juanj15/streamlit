import streamlit as st
import pandas as pd
import utilidades as util
import plotly.express as px
import matplotlib.pyplot as plt
import seaborn as sns

# T√≠tulo e icono de la p√°gina
st.set_page_config(page_title="Trayecto regional", page_icon="üèîÔ∏è", layout="wide")
util.generarMenu()

# Funci√≥n para cargar y procesar datos
@st.cache_data
def cargar_y_procesar_datos(ruta_archivo):
    try:
        # Cargar archivo CSV
        emisiones_df = pd.read_csv(ruta_archivo, encoding="latin1", sep=",")

        # Agrupar por 'OEM_Make' y 'Mission'
        emisiones_por_vehiculo_mision = emisiones_df.groupby(['OEM_Make', 'Mission'])['Emision_CO2_avg'].mean().reset_index()

        # Emisi√≥n promedio por fabricante
        emisiones_promedio_por_fabricante = emisiones_por_vehiculo_mision.groupby('OEM_Make')['Emision_CO2_avg'].mean().reset_index()
        emisiones_promedio_por_fabricante = emisiones_promedio_por_fabricante.sort_values('Emision_CO2_avg')

        return emisiones_df, emisiones_por_vehiculo_mision, emisiones_promedio_por_fabricante

    except Exception as e:
        st.error(f"Error al procesar el archivo: {str(e)}")
        return None, None, None

# Cargar los datos
ruta_archivo = "datos_vehiculo_regional.csv"
with st.spinner("Cargando y procesando datos..."):
    emisiones_df, emisiones_por_vehiculo_mision, emisiones_promedio_por_fabricante = cargar_y_procesar_datos(ruta_archivo)

# Verificar si se cargaron los datos correctamente
if emisiones_df is not None:
    st.header("An√°lisis de emisiones")
    st.write("""
    Este an√°lisis eval√∫a las emisiones promedio de CO2 al agrupar los datos por tipo de misi√≥n (Mission) 
    y fabricante del veh√≠culo (OEM_Make). La comparaci√≥n permite identificar qu√© misiones y fabricantes 
    presentan mayores niveles de emisiones.
    """)

    # Filtro din√°mico con opci√≥n de desmarcar
    st.write("## Comparaci√≥n de emisiones de CO2 por fabricante y misi√≥n")
    opcion_emisiones = st.selectbox(
        "Filtrar por tipo de veh√≠culo:",
        ["-- Sin filtro --", "Sin carga (L_CO2_gkm)", "Con carga (R_CO2_gkm)"]
    )

    # Determinar la columna de emisiones seg√∫n la opci√≥n seleccionada
    if opcion_emisiones == "Sin carga (L_CO2_gkm)":
        columna_emisiones = "L_CO2_gkm"
    elif opcion_emisiones == "Con carga (R_CO2_gkm)":
        columna_emisiones = "R_CO2_gkm"
    else:
        columna_emisiones = "Emision_CO2_avg"  # Informaci√≥n inicial por defecto

    # Agrupar los datos din√°micamente seg√∫n la columna seleccionada
    emisiones_por_vehiculo_mision_seleccion = (
        emisiones_df.groupby(['OEM_Make', 'Mission'])[columna_emisiones]
        .mean()
        .reset_index()
        .rename(columns={columna_emisiones: "Emision_CO2_avg"})
    )

    # Calcular la emisi√≥n promedio por fabricante
    emisiones_promedio_por_fabricante = (
        emisiones_por_vehiculo_mision_seleccion.groupby('OEM_Make')['Emision_CO2_avg']
        .mean()
        .reset_index()
        .sort_values(by="Emision_CO2_avg")
    )

    # Layout con dos columnas
    col1, col2 = st.columns([3, 1])

    # Gr√°fica din√°mica
    with col1:
        fig = px.bar(
            emisiones_por_vehiculo_mision_seleccion,
            x="OEM_Make",
            y="Emision_CO2_avg",
            color="Mission",
            title="Emisiones de CO2 por fabricante y misi√≥n",
            labels={
                "OEM_Make": "Fabricante",
                "Emision_CO2_avg": "Emisiones de CO2 (g/km)",
                "Mission": "Tipo de misi√≥n"
            }
        )
        fig.update_layout(
            legend_title="Tipo de Misi√≥n",
            legend=dict(orientation="h", y=1.02, x=1),
            xaxis_tickangle=-45
        )
        st.plotly_chart(fig)

    # M√©trica din√°mica
    with col2:
        st.subheader("Hallazgos")
        st.write("Este indicador muestra la marca con menor promedio de emisiones de CO2, compar√°ndola con el promedio general.")

        # Calcular los valores din√°micos
        marca_menor_emision = emisiones_promedio_por_fabricante.iloc[0]["OEM_Make"]
        emision_menor = emisiones_promedio_por_fabricante.iloc[0]["Emision_CO2_avg"]
        emision_promedio_total = emisiones_promedio_por_fabricante["Emision_CO2_avg"].mean()
        delta_emision = emision_menor - emision_promedio_total

        # Mostrar la m√©trica
        st.metric(
            label="Marca con menor emisi√≥n",
            value=f"{marca_menor_emision}",
            delta=f"{delta_emision:.2f} g/km respecto al promedio",
        )
else:
    st.error("No se pudieron cargar los datos. Verifique el archivo.")

st.write("---")
st.write("   ")

col5, col6 = st.columns([1, 3])

with col5:
    st.subheader("Tendencias")
    st.write("""Las recorridos (misiones) como **Regional delivery** tienen niveles elevados de emisiones, reflejando el uso intensivo de veh√≠culos Diesel para transporte de cargas en distancias medianas.
                
                \nOtras misiones presentan variabilidad, pero la predominancia del Diesel es clara en los niveles de CO2.""")

with col6:

        fig = px.box(emisiones_df, x='MS_FuelType', y='Emision_CO2_avg',
                    title='Distribuci√≥n de emisiones de CO2 por tipo de combustible',
                    labels={'MS_FuelType': 'Tipo de combustible', 'Emision_CO2_avg': 'Emisiones de CO2 (g/km)'},
                    color='MS_FuelType') #A√±adimos color por cada tipo de combustible.

        fig.update_layout(yaxis_title='Emisiones de CO2 (g/km)',
                        xaxis_title='Tipo de combustible')
        st.plotly_chart(fig)


st.write("---")
st.write("   ")

col7, col8 = st.columns([3, 2])
with col7:
        if emisiones_df is not None:
            # 1. Calcular las emisiones totales por categor√≠a
            emisiones_por_categoria = (
                emisiones_df.groupby("MS_VehicleCategoryCode")["Emision_CO2_avg"]
                .sum()
                .reset_index()
            )
            emisiones_por_categoria = emisiones_por_categoria.sort_values(
                by="Emision_CO2_avg", ascending=False
            )

            # 2. Crear el gr√°fico de barras con Plotly Express
            fig = px.bar(
                emisiones_por_categoria,
                x="MS_VehicleCategoryCode",
                y="Emision_CO2_avg",
                title="Emisiones Totales de CO2 por Categor√≠a de Veh√≠culo",
                labels={
                    "MS_VehicleCategoryCode": "Categor√≠a de Veh√≠culo",
                    "Emision_CO2_avg": "Emisiones de CO2 (g/km)",
                },
            )

            # 3. Mejorar la presentaci√≥n del gr√°fico
            fig.update_layout(
                xaxis_tickangle=-45,  # Rotar las etiquetas del eje x
                bargap=0.2,  # Espacio entre barras
            )
            fig.update_traces(marker_color="skyblue")  # Color de las barras

            # 4. Mostrar el gr√°fico en Streamlit
            st.plotly_chart(fig)

        else:
            st.warning("No hay datos disponibles para mostrar.")
            st.stop()


    # An√°lisis textual en la columna col8
with col8:
        st.write("### An√°lisis:")
        if not emisiones_por_categoria.empty:
            # Obtener la categor√≠a con mayores emisiones
            categoria_max = emisiones_por_categoria.iloc[0]["MS_VehicleCategoryCode"]
            max_emisiones = emisiones_por_categoria.iloc[0]["Emision_CO2_avg"]
            total_emisiones = emisiones_por_categoria["Emision_CO2_avg"].sum()
            porcentaje_max = (max_emisiones / total_emisiones) * 100

            # Mostrar el an√°lisis con valores calculados
            st.write(
                f"Este gr√°fico muestra las **emisiones totales de CO2** por cada categor√≠a de veh√≠culo. "
                f"Se puede observar que la categor√≠a **{categoria_max}** presenta las mayores emisiones, "
                f"representando el **{porcentaje_max:.2f}%** de las emisiones totales."
            )
        else:
            st.write("No hay datos suficientes para realizar el an√°lisis.")

        # Mostrar la tabla con los datos calculados
        st.dataframe(emisiones_por_categoria)

st.write("---")
st.write("   ")
st.write("   ")

st.header("An√°lisis integral del consumo de combustible")

    # Dividir la p√°gina en tres columnas
col9, col10, col11 = st.columns(3)

    # Gr√°fica 1: Relaci√≥n entre consumo y carga transportada
with col9:
        st.subheader("Consumo vs Carga")
        fig1 = px.scatter(
            emisiones_df,
            x="L_Payload_kg",
            y="Consumo_avg",
            size="Emision_CO2_avg",
            color="MS_FuelType",
            hover_data=["OEM_Model", "Mission"],
            title="Carga vs Consumo",
            labels={"L_Payload_kg": "Carga (kg)", "Consumo_avg": "Consumo Promedio (L/100km)"}
        )
        st.plotly_chart(fig1, use_container_width=True)

    # Gr√°fica 2: Comparaci√≥n por tipo de combustible
with col10:
        st.subheader("Consumo y emisiones por combustible")
        consumo_emisiones_combustible = emisiones_df.groupby("MS_FuelType")[["Consumo_avg", "Emision_CO2_avg"]].mean().reset_index()
        fig2 = px.bar(
            consumo_emisiones_combustible,
            x="MS_FuelType",
            y=["Consumo_avg", "Emision_CO2_avg"],
            barmode="group",
            title="Consumo y CO2 por combustible",
            labels={"value": "Promedio", "variable": "M√©trica", "MS_FuelType": "Tipo de Combustible"}
        )
        st.plotly_chart(fig2, use_container_width=True)

    # Gr√°fica 3: Distribuci√≥n del consumo promedio
with col11:
        st.subheader("Distribuci√≥n del consumo")
        fig3 = px.histogram(
            emisiones_df,
            x="Consumo_avg",
            nbins=20,
            title="Distribuci√≥n del consumo",
            labels={"Consumo_avg": "Consumo Promedio (L/100km)"},
            color_discrete_sequence=["green"]
        )
        st.plotly_chart(fig3, use_container_width=True)
        
st.subheader("An√°lisis de la relaci√≥n entre consumo, carga y emisiones")
st.write("""
    1. **Consumo vs Carga**: Los veh√≠culos con cargas m√°s pesadas tienden a consumir m√°s combustible, pero algunos presentan mayor eficiencia al transportar m√°s carga con menor consumo.
    2. **Tipo de combustible**: El Diesel, aunque predominante, muestra un consumo y emisiones m√°s elevados en promedio. Esto resalta la necesidad de explorar alternativas m√°s limpias.
    3. **Distribuci√≥n del consumo**: La mayor√≠a de los veh√≠culos tienen consumos concentrados en un rango espec√≠fico, pero existen valores extremos que requieren mayor atenci√≥n.
    """)

## A√±adido recientemente

# Secci√≥n para calcular el nivel de emisi√≥n basado en una cantidad de veh√≠culos
st.header("C√°lculo de emisiones para una cantidad espec√≠fica de veh√≠culos")

# Obtener las 5 marcas con m√°s referencias
top5_marcas = emisiones_df['OEM_Make'].value_counts().head(5).index.tolist()
st.write("Las **5 marcas con m√°s referencias** en la base de datos son:", ", ".join(top5_marcas))

# Crear una selecci√≥n de marca y textbox para la cantidad de veh√≠culos
col15, col16 = st.columns(2)
with col15:
    marca_seleccionada = st.selectbox("Selecciona una marca de las 5 principales:", [""] + top5_marcas)

with col16:
    cantidad_vehiculos = st.number_input("Cantidad de veh√≠culos a analizar:", min_value=1, value=10, step=1)

# Calcular las emisiones si la marca est√° seleccionada
if marca_seleccionada:
    # Filtrar por la marca seleccionada y calcular las emisiones promedio
    emisiones_marca = emisiones_df[emisiones_df['OEM_Make'] == marca_seleccionada]

    # Seleccionar las 5 referencias con menor emisi√≥n promedio
    top5_referencias = (
        emisiones_marca.groupby('OEM_Model')['Emision_CO2_avg']
        .mean()
        .nsmallest(5)
        .reset_index()
    )

    # Calcular emisiones totales para la cantidad seleccionada de veh√≠culos
    top5_referencias['Emisiones Totales'] = top5_referencias['Emision_CO2_avg'] * cantidad_vehiculos

    # Mostrar resultados
    st.write(f"**Marca seleccionada:** {marca_seleccionada}")
    st.write(f"**Emisiones totales calculadas para las referencias de la marca:**")

    # Mostrar tabla con resultados
    st.table(top5_referencias.rename(columns={
        'OEM_Model': 'Modelo de Veh√≠culo',
        'Emision_CO2_avg': 'Emisi√≥n Promedio (g/km)',
        'Emisiones Totales': 'Emisiones Totales (g/km)'
    }))

    # Gr√°fica interactiva con Plotly
    st.subheader("Top 5 referencias con menor emisi√≥n promedio de CO‚ÇÇ")
    import plotly.express as px

    fig = px.bar(
        top5_referencias,
        x='OEM_Model',
        y='Emisiones Totales',
        text='Emisiones Totales',
        title=f"Top 5 referencias con menor emisi√≥n en {marca_seleccionada}",
        labels={
            'OEM_Model': 'Modelo de Veh√≠culo',
            'Emisiones Totales': 'Emisiones Totales (g/km)'
        },
        color='Emisiones Totales',  # A√±adir un degradado de color
        color_continuous_scale='Blues'
    )

    # Ajustes adicionales para la gr√°fica
    fig.update_traces(texttemplate='%{text:.2f}', textposition='outside')
    fig.update_layout(
        xaxis_title="Modelo de Veh√≠culo",
        yaxis_title="Emisiones Totales (g/km)",
        xaxis_tickangle=-45
    )

    # Mostrar gr√°fica en Streamlit
    st.plotly_chart(fig)

else:
    st.info("Por favor selecciona una marca y la cantidad de veh√≠culos para realizar el c√°lculo.")


## M√©trica
# Calcular la referencia con menos y m√°s emisiones
referencia_menor_emision = top5_referencias.iloc[0]
referencia_mayor_emision = top5_referencias.iloc[-1]

# M√©tricas
# Calcular la referencia con menos y m√°s emisiones
referencia_menor_emision = top5_referencias.iloc[0]
referencia_mayor_emision = top5_referencias.iloc[-1]

# M√©tricas
st.subheader("Resumen de Emisiones")

col17, col18 = st.columns(2)

with col17:
    st.metric(
        label="Referencia con menores emisiones",
        value=f"{referencia_menor_emision['OEM_Model']} ({referencia_menor_emision['Emision_CO2_avg']:.2f} g/km)"
    )

with col18:
    delta_emision = referencia_mayor_emision['Emision_CO2_avg'] - referencia_menor_emision['Emision_CO2_avg']
    promedio_emisiones = top5_referencias['Emision_CO2_avg'].mean()
    
    st.metric(
        label="Comparaci√≥n promedio vs mayor emisi√≥n",
        value=f"{promedio_emisiones:.2f} g/km",
        delta=f"{-delta_emision:.2f} g/km respecto a {referencia_mayor_emision['OEM_Model']}"
    )

st.subheader("An√°lisis de emisiones de CO‚ÇÇ por referencia de veh√≠culos")
st.write("""El an√°lisis presentado se centra en la comparaci√≥n de las 5 referencias de veh√≠culos con menor emisi√≥n de CO‚ÇÇ dentro de la marca seleccionada. Se calcularon las emisiones totales para una cantidad espec√≠fica de veh√≠culos, facilitando as√≠ la evaluaci√≥n del impacto ambiental a escala.

Referencia con menores emisiones:
La referencia {modelo_menor_emision} destaca por registrar la menor emisi√≥n promedio, con {emision_menor:.2f} g/km, lo que representa una reducci√≥n de {abs(delta):.2f} g/km en comparaci√≥n con la referencia que m√°s emite, {modelo_mayor_emision}.

Tendencia general:
Las referencias analizadas muestran una significativa variabilidad en sus niveles de emisiones. La diferencia entre la referencia m√°s eficiente y la de mayor emisi√≥n resalta oportunidades de optimizaci√≥n en el desempe√±o ambiental de la flota vehicular.

Impacto acumulado:
Al considerar una cantidad determinada de veh√≠culos, se evidenci√≥ el impacto acumulativo de las emisiones totales. Esta m√©trica permite a los responsables de flotas y tomadores de decisiones identificar modelos m√°s sostenibles y promover su adopci√≥n a gran escala.
         """)

## Emisiones Medell√≠n
# Secci√≥n para comparar las emisiones con el nivel de emisiones de Medell√≠n
st.header("Comparaci√≥n de emisiones con el nivel de emisiones de Medell√≠n")

# Input: Nivel de emisiones de Medell√≠n (en toneladas)
emisiones_medellin = st.number_input(
    "Ingresa el nivel de emisiones de Medell√≠n (en toneladas de CO‚ÇÇ):", 
    min_value=0.0, 
    value=10000.0,  # Ejemplo: 10,000 toneladas
    step=100.0
)

# Input: Recorrido diario promedio en kil√≥metros
recorrido_diario = st.number_input(
    "Ingresa el recorrido promedio diario de los veh√≠culos (en km):", 
    min_value=1, 
    value=100, 
    step=10
)

if marca_seleccionada and cantidad_vehiculos:
    # Calcular emisiones totales diarias de la cantidad de veh√≠culos seleccionados
    emision_total_diaria = top5_referencias['Emision_CO2_avg'].mean() * cantidad_vehiculos * recorrido_diario
    emision_total_toneladas = emision_total_diaria / 1_000_000  # Convertir a toneladas

    # Relaci√≥n entre las emisiones de los veh√≠culos seleccionados y las de Medell√≠n
    porcentaje_emisiones = (emision_total_toneladas / emisiones_medellin) * 100

    # Mostrar resultados
    st.write("### Resultados del an√°lisis:")
    st.metric(
        label="Emisiones totales diarias de los veh√≠culos seleccionados",
        value=f"{emision_total_toneladas:.2f} toneladas de CO‚ÇÇ",
        delta=f"{porcentaje_emisiones:.2f}% del total de Medell√≠n"
    )

    # Gr√°fica comparativa con Plotly
    st.subheader("Comparaci√≥n gr√°fica de emisiones")
    import plotly.graph_objects as go

    fig = go.Figure()
    fig.add_trace(go.Bar(
        x=["Emisiones de los veh√≠culos seleccionados", "Nivel de emisiones de Medell√≠n"],
        y=[emision_total_toneladas, emisiones_medellin],
        text=[f"{emision_total_toneladas:.2f} toneladas", f"{emisiones_medellin:.2f} toneladas"],
        textposition='auto',
        marker_color=['skyblue', 'lightgreen']
    ))

    fig.update_layout(
        title="Comparaci√≥n de emisiones entre veh√≠culos seleccionados y Medell√≠n",
        xaxis_title="Fuente de emisiones",
        yaxis_title="Toneladas de CO‚ÇÇ",
        showlegend=False
    )

    st.plotly_chart(fig)

    # Interpretaci√≥n
    st.write("### Interpretaci√≥n del an√°lisis")
    st.write(f"""
        - Las emisiones totales de los **{cantidad_vehiculos} veh√≠culos seleccionados**, 
          recorriendo un promedio de **{recorrido_diario} km/d√≠a**, equivalen a **{emision_total_toneladas:.2f} toneladas de CO‚ÇÇ por d√≠a**.
        - Esto representa aproximadamente un **{porcentaje_emisiones:.2f}%** del nivel total de emisiones registrado en Medell√≠n, 
          que se estima en **{emisiones_medellin} toneladas**.
    """)
else:
    st.info("Por favor, selecciona una marca, la cantidad de veh√≠culos y proporciona los datos para realizar la comparaci√≥n.")

    
## Botones
st.write("---")
st.write("   ")

col12, col13, col14 = st.columns([1,1,5])

with col12:
    btnNacional = st.button('Datos nacionales')
with col13:
    btnInicio = st.button('Inicio')

if btnNacional:
    st.switch_page('pages/nacional.py')

if btnInicio:
    st.switch_page('main.py')